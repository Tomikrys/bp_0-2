{% extends 'base.html.twig' %}
{% block title %}Menu{% endblock %}
{% block stylesheets %}
    <style>
        .card-header {
            padding: 0px 5px 0px 5px;
        }

        .meal {
            border: 1px solid gray;
            cursor: grab;
            margin: 2px;
        }

        .food-header, .food-items-drop {
            margin-left: 5px;
        }

        .food-items-drop:empty {
            min-height: 30px;
        }

        .food-items-drop {
            border: 2px dashed #373A3C;
            border-radius: 5px;
            background-color: #F4F4F4;
            margin-bottom: 5px;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .menu-block {
            width: calc(100% - 30px);
        }

        .trash-block {
            width: 30px;
        }

        /*filters*/
        .tag-filter-item, .type-filter-item {
            cursor: pointer;
        }
        .type-filter-item {
            margin-right: 1px;
            padding-top: 3px;
            padding-bottom: 3px;
            background-color: #373A3C;
            color: white;
            text-align: center;
        }

        .trash-block i {
            font-size: 30px;
            position:sticky;
            text-align: center;
        }
        #menuList, #foodList {
            height: 70vh;
            overflow-y: scroll;
            padding-right: 10px;
        }

        .menu-block, .trash-block {
            float: left;
        }

        .col-left {
            /*padding-right: 0;*/
        }
        .col-right {
            padding-left: 0;
        }

        /* width */
        ::-webkit-scrollbar {
          width: 4px;
        }
        /* Track */
        ::-webkit-scrollbar-track {
          background: #f1f1f1;
        }
        /* Handle */
        ::-webkit-scrollbar-thumb {
          background: #888;
          border-radius: 6px;
        }
        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
          background: #555;
        }
    </style>
{% endblock %}
{% block body %}
    <div class="menu-block">
        <div class="row menu-pick">
            <div id="food-picker" class="col col-left">
                <h1>Sestavení menu</h1>
                <input onkeyup="filterSearch(this.value);" class="form-control form-control-sm" type="text" placeholder="Vyhledávání..." id="food-finder">
                <button class="btn btn-link p-0 m-0" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">Filtry</button>
                <div  class="collapse show" id="collapseExample">
                    <div class="row type-filter">
                        <div class="col type-filter-item" onclick="filterType('')">
                            Vše
                        </div>
                        {% for type in types %}
                            <div onclick="filterType('{{ type.name }}')" class="col type-filter-item">
                                {{ type.name }}
                            </div>
                        {% endfor %}
                    </div>
                    <div class="row tag-filter">
                        {% for tag in tags %}
                            <span onclick="filterTag(this)" class="tag-filter-item badge badge-danger m-1">
                                {{ tag.name }}
                            </span>
                        {% endfor %}
                    </div>
                </div>
                <div id="foodList" class="menu-header delete-on-drop" ondrop="drop(event)" ondragover="allowDrop(event)" >
                    {% for type,foods in foods %}
                        <div id="foodList_{{ type }}" data-filter="{{ type }}" class="food-list filter-type delete-on-drop"
                             ondrop="drop(event)" ondragover="allowDrop(event)">
                            <h2 id="{{ type }}" class="delete-on-drop">{{ type }}</h2>
                            {% for food in foods %}
                                {# TODO bez toho prázdnýho možná no#}
                                {% set tags = "[ \"\" " %}
                                {% for tag in food.tags %}
                                    {% set tags = tags ~ ", \"" ~ tag.name ~ "\" "%}
                                {% endfor %}
                                {% set tags = tags ~ "]"%}
                                <div class="meal card-header filter-tags" id="meal{{ food.id }}" data-id="{{ food.id }}"
                                     data-type="{{ type }}" data-tags="{{ tags }}" data-description="{{ food.description }}"
                                     draggable="true" ondragstart="drag(event)">
                                    {{ food.name }}, {{ food.price }}
                                </div>
                            {% endfor %}
                        </div>
                    {% endfor %}
                </div>
            </div>

            <div class="col col-right">
                <h2>Jídelníček</h2>
                <div id="page-content">
                    <div id="menuList">
                    {% for day in settings.days %}
                        <div class="day">
                            <h3 class="day-name">{{ day }}</h3>
                            {% for meal in settings.meals %}
                                <h4 class="JSON-food-header food-header" data-type="{{ meal }}" ondrop="drop(event)"
                                    ondragover="allowDrop(event)">{{ meal }}</h4>
                                <div class="JSON-food-items food-items-drop" ondrop="drop(event)"
                                     ondragover="allowDrop(event)"></div>
                            {% endfor %}
                        </div>
                    {% endfor %}
    {#            <button onclick="getMenu()" class="btn btn-primary">Náhled</button>#}
                    </div>
                    <h3>Export</h3>
                    <form class="form-inline mb-2">
                        <select class="form-control" id="export_template">
                            {% for template in templates %}
                                <option value="{{ template.path }}">{{ template.name }}</option>
                            {% endfor %}
                        </select>
                        <button onclick="generateMenu()" class="btn btn-success ml-1">Exportovat</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="trash-block">
        <div id="trash" ondrop="delete_meal(event)" ondragover="allowDrop(event)">
            <i class="fa fa-trash" aria-hidden="true"></i>
        </div>
    </div>


{% endblock %}

{% block javascripts %}
<script>
    function filterType(type) {
        let elements = document.getElementsByClassName("filter-type");
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = 'none';
            if (elements[i].getAttribute('data-filter') === type || type === "")
                elements[i].style.display = 'block';
        }
    }

    filter_tags = [];

    function filterTag(e) {
        let tag = e.innerText;
        console.log(tag);
        if (filter_tags.includes(tag)) {
            // removing tag
            const index = filter_tags.indexOf(tag);
            if (index > -1) {
                filter_tags.splice(index, 1);
            }

            e.classList.remove("badge-success");
            e.classList.add("badge-danger");
        } else {
            filter_tags.push(tag);
            e.classList.remove("badge-danger");
            e.classList.add("badge-success");
        }
        filterTags();
    }

    function filterTags() {
        let elements = document.getElementsByClassName("filter-tags");
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = 'none';
            let food_tags = JSON.parse(elements[i].getAttribute('data-tags'));
            let intersection = food_tags.filter(value => -1 !== filter_tags.indexOf(value));

            if (intersection.length > 0 || filter_tags.length === 0)
                 elements[i].style.display = 'block';
        }
    }

    var Latinise={};Latinise.latin_map={"Á":"A","Ă":"A","Ắ":"A","Ặ":"A","Ằ":"A","Ẳ":"A","Ẵ":"A","Ǎ":"A","Â":"A","Ấ":"A","Ậ":"A","Ầ":"A","Ẩ":"A","Ẫ":"A","Ä":"A","Ǟ":"A","Ȧ":"A","Ǡ":"A","Ạ":"A","Ȁ":"A","À":"A","Ả":"A","Ȃ":"A","Ā":"A","Ą":"A","Å":"A","Ǻ":"A","Ḁ":"A","Ⱥ":"A","Ã":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ḃ":"B","Ḅ":"B","Ɓ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ć":"C","Č":"C","Ç":"C","Ḉ":"C","Ĉ":"C","Ċ":"C","Ƈ":"C","Ȼ":"C","Ď":"D","Ḑ":"D","Ḓ":"D","Ḋ":"D","Ḍ":"D","Ɗ":"D","Ḏ":"D","ǲ":"D","ǅ":"D","Đ":"D","Ƌ":"D","Ǳ":"DZ","Ǆ":"DZ","É":"E","Ĕ":"E","Ě":"E","Ȩ":"E","Ḝ":"E","Ê":"E","Ế":"E","Ệ":"E","Ề":"E","Ể":"E","Ễ":"E","Ḙ":"E","Ë":"E","Ė":"E","Ẹ":"E","Ȅ":"E","È":"E","Ẻ":"E","Ȇ":"E","Ē":"E","Ḗ":"E","Ḕ":"E","Ę":"E","Ɇ":"E","Ẽ":"E","Ḛ":"E","Ꝫ":"ET","Ḟ":"F","Ƒ":"F","Ǵ":"G","Ğ":"G","Ǧ":"G","Ģ":"G","Ĝ":"G","Ġ":"G","Ɠ":"G","Ḡ":"G","Ǥ":"G","Ḫ":"H","Ȟ":"H","Ḩ":"H","Ĥ":"H","Ⱨ":"H","Ḧ":"H","Ḣ":"H","Ḥ":"H","Ħ":"H","Í":"I","Ĭ":"I","Ǐ":"I","Î":"I","Ï":"I","Ḯ":"I","İ":"I","Ị":"I","Ȉ":"I","Ì":"I","Ỉ":"I","Ȋ":"I","Ī":"I","Į":"I","Ɨ":"I","Ĩ":"I","Ḭ":"I","Ꝺ":"D","Ꝼ":"F","Ᵹ":"G","Ꞃ":"R","Ꞅ":"S","Ꞇ":"T","Ꝭ":"IS","Ĵ":"J","Ɉ":"J","Ḱ":"K","Ǩ":"K","Ķ":"K","Ⱪ":"K","Ꝃ":"K","Ḳ":"K","Ƙ":"K","Ḵ":"K","Ꝁ":"K","Ꝅ":"K","Ĺ":"L","Ƚ":"L","Ľ":"L","Ļ":"L","Ḽ":"L","Ḷ":"L","Ḹ":"L","Ⱡ":"L","Ꝉ":"L","Ḻ":"L","Ŀ":"L","Ɫ":"L","ǈ":"L","Ł":"L","Ǉ":"LJ","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ń":"N","Ň":"N","Ņ":"N","Ṋ":"N","Ṅ":"N","Ṇ":"N","Ǹ":"N","Ɲ":"N","Ṉ":"N","Ƞ":"N","ǋ":"N","Ñ":"N","Ǌ":"NJ","Ó":"O","Ŏ":"O","Ǒ":"O","Ô":"O","Ố":"O","Ộ":"O","Ồ":"O","Ổ":"O","Ỗ":"O","Ö":"O","Ȫ":"O","Ȯ":"O","Ȱ":"O","Ọ":"O","Ő":"O","Ȍ":"O","Ò":"O","Ỏ":"O","Ơ":"O","Ớ":"O","Ợ":"O","Ờ":"O","Ở":"O","Ỡ":"O","Ȏ":"O","Ꝋ":"O","Ꝍ":"O","Ō":"O","Ṓ":"O","Ṑ":"O","Ɵ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Õ":"O","Ṍ":"O","Ṏ":"O","Ȭ":"O","Ƣ":"OI","Ꝏ":"OO","Ɛ":"E","Ɔ":"O","Ȣ":"OU","Ṕ":"P","Ṗ":"P","Ꝓ":"P","Ƥ":"P","Ꝕ":"P","Ᵽ":"P","Ꝑ":"P","Ꝙ":"Q","Ꝗ":"Q","Ŕ":"R","Ř":"R","Ŗ":"R","Ṙ":"R","Ṛ":"R","Ṝ":"R","Ȑ":"R","Ȓ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꜿ":"C","Ǝ":"E","Ś":"S","Ṥ":"S","Š":"S","Ṧ":"S","Ş":"S","Ŝ":"S","Ș":"S","Ṡ":"S","Ṣ":"S","Ṩ":"S","Ť":"T","Ţ":"T","Ṱ":"T","Ț":"T","Ⱦ":"T","Ṫ":"T","Ṭ":"T","Ƭ":"T","Ṯ":"T","Ʈ":"T","Ŧ":"T","Ɐ":"A","Ꞁ":"L","Ɯ":"M","Ʌ":"V","Ꜩ":"TZ","Ú":"U","Ŭ":"U","Ǔ":"U","Û":"U","Ṷ":"U","Ü":"U","Ǘ":"U","Ǚ":"U","Ǜ":"U","Ǖ":"U","Ṳ":"U","Ụ":"U","Ű":"U","Ȕ":"U","Ù":"U","Ủ":"U","Ư":"U","Ứ":"U","Ự":"U","Ừ":"U","Ử":"U","Ữ":"U","Ȗ":"U","Ū":"U","Ṻ":"U","Ų":"U","Ů":"U","Ũ":"U","Ṹ":"U","Ṵ":"U","Ꝟ":"V","Ṿ":"V","Ʋ":"V","Ṽ":"V","Ꝡ":"VY","Ẃ":"W","Ŵ":"W","Ẅ":"W","Ẇ":"W","Ẉ":"W","Ẁ":"W","Ⱳ":"W","Ẍ":"X","Ẋ":"X","Ý":"Y","Ŷ":"Y","Ÿ":"Y","Ẏ":"Y","Ỵ":"Y","Ỳ":"Y","Ƴ":"Y","Ỷ":"Y","Ỿ":"Y","Ȳ":"Y","Ɏ":"Y","Ỹ":"Y","Ź":"Z","Ž":"Z","Ẑ":"Z","Ⱬ":"Z","Ż":"Z","Ẓ":"Z","Ȥ":"Z","Ẕ":"Z","Ƶ":"Z","Ĳ":"IJ","Œ":"OE","ᴀ":"A","ᴁ":"AE","ʙ":"B","ᴃ":"B","ᴄ":"C","ᴅ":"D","ᴇ":"E","ꜰ":"F","ɢ":"G","ʛ":"G","ʜ":"H","ɪ":"I","ʁ":"R","ᴊ":"J","ᴋ":"K","ʟ":"L","ᴌ":"L","ᴍ":"M","ɴ":"N","ᴏ":"O","ɶ":"OE","ᴐ":"O","ᴕ":"OU","ᴘ":"P","ʀ":"R","ᴎ":"N","ᴙ":"R","ꜱ":"S","ᴛ":"T","ⱻ":"E","ᴚ":"R","ᴜ":"U","ᴠ":"V","ᴡ":"W","ʏ":"Y","ᴢ":"Z","á":"a","ă":"a","ắ":"a","ặ":"a","ằ":"a","ẳ":"a","ẵ":"a","ǎ":"a","â":"a","ấ":"a","ậ":"a","ầ":"a","ẩ":"a","ẫ":"a","ä":"a","ǟ":"a","ȧ":"a","ǡ":"a","ạ":"a","ȁ":"a","à":"a","ả":"a","ȃ":"a","ā":"a","ą":"a","ᶏ":"a","ẚ":"a","å":"a","ǻ":"a","ḁ":"a","ⱥ":"a","ã":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ḃ":"b","ḅ":"b","ɓ":"b","ḇ":"b","ᵬ":"b","ᶀ":"b","ƀ":"b","ƃ":"b","ɵ":"o","ć":"c","č":"c","ç":"c","ḉ":"c","ĉ":"c","ɕ":"c","ċ":"c","ƈ":"c","ȼ":"c","ď":"d","ḑ":"d","ḓ":"d","ȡ":"d","ḋ":"d","ḍ":"d","ɗ":"d","ᶑ":"d","ḏ":"d","ᵭ":"d","ᶁ":"d","đ":"d","ɖ":"d","ƌ":"d","ı":"i","ȷ":"j","ɟ":"j","ʄ":"j","ǳ":"dz","ǆ":"dz","é":"e","ĕ":"e","ě":"e","ȩ":"e","ḝ":"e","ê":"e","ế":"e","ệ":"e","ề":"e","ể":"e","ễ":"e","ḙ":"e","ë":"e","ė":"e","ẹ":"e","ȅ":"e","è":"e","ẻ":"e","ȇ":"e","ē":"e","ḗ":"e","ḕ":"e","ⱸ":"e","ę":"e","ᶒ":"e","ɇ":"e","ẽ":"e","ḛ":"e","ꝫ":"et","ḟ":"f","ƒ":"f","ᵮ":"f","ᶂ":"f","ǵ":"g","ğ":"g","ǧ":"g","ģ":"g","ĝ":"g","ġ":"g","ɠ":"g","ḡ":"g","ᶃ":"g","ǥ":"g","ḫ":"h","ȟ":"h","ḩ":"h","ĥ":"h","ⱨ":"h","ḧ":"h","ḣ":"h","ḥ":"h","ɦ":"h","ẖ":"h","ħ":"h","ƕ":"hv","í":"i","ĭ":"i","ǐ":"i","î":"i","ï":"i","ḯ":"i","ị":"i","ȉ":"i","ì":"i","ỉ":"i","ȋ":"i","ī":"i","į":"i","ᶖ":"i","ɨ":"i","ĩ":"i","ḭ":"i","ꝺ":"d","ꝼ":"f","ᵹ":"g","ꞃ":"r","ꞅ":"s","ꞇ":"t","ꝭ":"is","ǰ":"j","ĵ":"j","ʝ":"j","ɉ":"j","ḱ":"k","ǩ":"k","ķ":"k","ⱪ":"k","ꝃ":"k","ḳ":"k","ƙ":"k","ḵ":"k","ᶄ":"k","ꝁ":"k","ꝅ":"k","ĺ":"l","ƚ":"l","ɬ":"l","ľ":"l","ļ":"l","ḽ":"l","ȴ":"l","ḷ":"l","ḹ":"l","ⱡ":"l","ꝉ":"l","ḻ":"l","ŀ":"l","ɫ":"l","ᶅ":"l","ɭ":"l","ł":"l","ǉ":"lj","ſ":"s","ẜ":"s","ẛ":"s","ẝ":"s","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ᵯ":"m","ᶆ":"m","ń":"n","ň":"n","ņ":"n","ṋ":"n","ȵ":"n","ṅ":"n","ṇ":"n","ǹ":"n","ɲ":"n","ṉ":"n","ƞ":"n","ᵰ":"n","ᶇ":"n","ɳ":"n","ñ":"n","ǌ":"nj","ó":"o","ŏ":"o","ǒ":"o","ô":"o","ố":"o","ộ":"o","ồ":"o","ổ":"o","ỗ":"o","ö":"o","ȫ":"o","ȯ":"o","ȱ":"o","ọ":"o","ő":"o","ȍ":"o","ò":"o","ỏ":"o","ơ":"o","ớ":"o","ợ":"o","ờ":"o","ở":"o","ỡ":"o","ȏ":"o","ꝋ":"o","ꝍ":"o","ⱺ":"o","ō":"o","ṓ":"o","ṑ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","õ":"o","ṍ":"o","ṏ":"o","ȭ":"o","ƣ":"oi","ꝏ":"oo","ɛ":"e","ᶓ":"e","ɔ":"o","ᶗ":"o","ȣ":"ou","ṕ":"p","ṗ":"p","ꝓ":"p","ƥ":"p","ᵱ":"p","ᶈ":"p","ꝕ":"p","ᵽ":"p","ꝑ":"p","ꝙ":"q","ʠ":"q","ɋ":"q","ꝗ":"q","ŕ":"r","ř":"r","ŗ":"r","ṙ":"r","ṛ":"r","ṝ":"r","ȑ":"r","ɾ":"r","ᵳ":"r","ȓ":"r","ṟ":"r","ɼ":"r","ᵲ":"r","ᶉ":"r","ɍ":"r","ɽ":"r","ↄ":"c","ꜿ":"c","ɘ":"e","ɿ":"r","ś":"s","ṥ":"s","š":"s","ṧ":"s","ş":"s","ŝ":"s","ș":"s","ṡ":"s","ṣ":"s","ṩ":"s","ʂ":"s","ᵴ":"s","ᶊ":"s","ȿ":"s","ɡ":"g","ᴑ":"o","ᴓ":"o","ᴝ":"u","ť":"t","ţ":"t","ṱ":"t","ț":"t","ȶ":"t","ẗ":"t","ⱦ":"t","ṫ":"t","ṭ":"t","ƭ":"t","ṯ":"t","ᵵ":"t","ƫ":"t","ʈ":"t","ŧ":"t","ᵺ":"th","ɐ":"a","ᴂ":"ae","ǝ":"e","ᵷ":"g","ɥ":"h","ʮ":"h","ʯ":"h","ᴉ":"i","ʞ":"k","ꞁ":"l","ɯ":"m","ɰ":"m","ᴔ":"oe","ɹ":"r","ɻ":"r","ɺ":"r","ⱹ":"r","ʇ":"t","ʌ":"v","ʍ":"w","ʎ":"y","ꜩ":"tz","ú":"u","ŭ":"u","ǔ":"u","û":"u","ṷ":"u","ü":"u","ǘ":"u","ǚ":"u","ǜ":"u","ǖ":"u","ṳ":"u","ụ":"u","ű":"u","ȕ":"u","ù":"u","ủ":"u","ư":"u","ứ":"u","ự":"u","ừ":"u","ử":"u","ữ":"u","ȗ":"u","ū":"u","ṻ":"u","ų":"u","ᶙ":"u","ů":"u","ũ":"u","ṹ":"u","ṵ":"u","ᵫ":"ue","ꝸ":"um","ⱴ":"v","ꝟ":"v","ṿ":"v","ʋ":"v","ᶌ":"v","ⱱ":"v","ṽ":"v","ꝡ":"vy","ẃ":"w","ŵ":"w","ẅ":"w","ẇ":"w","ẉ":"w","ẁ":"w","ⱳ":"w","ẘ":"w","ẍ":"x","ẋ":"x","ᶍ":"x","ý":"y","ŷ":"y","ÿ":"y","ẏ":"y","ỵ":"y","ỳ":"y","ƴ":"y","ỷ":"y","ỿ":"y","ȳ":"y","ẙ":"y","ɏ":"y","ỹ":"y","ź":"z","ž":"z","ẑ":"z","ʑ":"z","ⱬ":"z","ż":"z","ẓ":"z","ȥ":"z","ẕ":"z","ᵶ":"z","ᶎ":"z","ʐ":"z","ƶ":"z","ɀ":"z","ﬀ":"ff","ﬃ":"ffi","ﬄ":"ffl","ﬁ":"fi","ﬂ":"fl","ĳ":"ij","œ":"oe","ﬆ":"st","ₐ":"a","ₑ":"e","ᵢ":"i","ⱼ":"j","ₒ":"o","ᵣ":"r","ᵤ":"u","ᵥ":"v","ₓ":"x"};
    String.prototype.latinise=function(){return this.replace(/[^A-Za-z0-9\[\] ]/g,function(a){return Latinise.latin_map[a]||a})};

    // TODO možná trochu zchytřit no, takhle to bere celý HTML
    function filterSearch(s) {
        let elements = document.getElementsByClassName("filter-tags");
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = 'none';

            if (elements[i].outerHTML.latinise().toLowerCase().includes(s.latinise().toLowerCase()) || s === "")
                elements[i].style.display = 'block';
        }
    }

    $().ready(function() {
		var $scrollingDiv = $("#trash");
		$(window).scroll(function(){
		    if ($(window).scrollTop() > $("#main-nav").height()) {
                $scrollingDiv
                    .stop()
                    .animate({"marginTop": ($(window).scrollTop() - $("#main-nav").height()) + "px"}, "fast" );
            }
		});
	});

    function generate_json() {
        let menuList = document.getElementById("menuList");
        let menuDays = menuList.children;

        let menu = [];

        for (let i = 0; i < menuDays.length; i++) {
            let menuDay = menuDays[i].children;
            let day = {day: "", meals: []};
            let type = {type: "", meals: []};

            for (let j = 0; j < menuDay.length; j++) {
                let menuDayItem = menuDay[j];
                if (menuDayItem.classList.contains("day-name")) {
                    day.day = menuDayItem.innerText;

                } else if (menuDayItem.classList.contains("JSON-food-header")){
                    if (type.type !== "") {
                        // kopie objektu, jinak by se uložila pouze reference
                        let cloneType = Object.assign({}, type);
                        day.meals.push(cloneType);
                        type.meals = [];
                    }
                    //type.name= menuDayItem.getAttribute("data-type");
                    type.type= menuDayItem.innerText;

                } else if (menuDayItem.classList.contains("JSON-food-items")){
                    let menuMeals = menuDayItem.children;
                    for (let k = 0; k < menuMeals.length; k++) {
                        let meal = {id: menuMeals[k].getAttribute('data-id'), text: menuMeals[k].innerText};
                        type.meals.push(meal);
                    }
                }
            }
            day.meals.push(type);
            menu.push(day);
        }
        return menu;
    }

        // for html_to_doc
    // function generate_json_old() {
    //     let menuList = document.getElementById("menuList");
    //     let menuDays = menuList.children;
    //
    //     let menu = [];
    //
    //     for (let i = 0; i < menuDays.length; i++) {
    //         let menuDay = menuDays[i].children;
    //         let day = {name: "", meals: []};
    //         let type = {name: "", meals: []};
    //
    //         for (let j = 0; j < menuDay.length; j++) {
    //             let menuDayItem = menuDay[j];
    //             if (menuDayItem.classList.contains("day-name")) {
    //                 day.name = menuDayItem.innerText;
    //
    //             } else if (menuDayItem.classList.contains("food-header")){
    //                 if (type.name !== "") {
    //                     // kopie objektu, jinak by se uložila pouze reference
    //                     let cloneType = Object.assign({}, type);
    //                     day.meals.push(cloneType);
    //                     type.meals = [];
    //                 }
    //                 //type.name= menuDayItem.getAttribute("data-type");
    //                 type.name= menuDayItem.innerText;
    //
    //             } else if (menuDayItem.classList.contains("food-item")){
    //                 let menuMeals = menuDayItem.children;
    //                 for (let k = 0; k < menuMeals.length; k++) {
    //                     let meal = {id: menuMeals[k].id, name: menuMeals[k].innerText};
    //                     type.meals.push(meal);
    //                 }
    //             }
    //         }
    //         day.meals.push(type);
    //         menu.push(day);
    //     }
    //     console.log(menu);
    //     return menu;
    // }


    function getMenu() {
        let json = generate_json();
        window.open("/menu/generate?generate=false&json=" + JSON.stringify(json), "_blank", "fullscreen=yes");
    }

    async function  generateMenu () {
        let json = generate_json();
        //let template = "words/template.docx";
        let template = document.getElementById("export_template").value;
        // window.open("/menu/generate?generate=true&json=" + JSON.stringify(json),
        //     "_blank", "width=10,height=10,top=30,left=200");
        fetch("/menu/generate?generate=true&template=" + template +"&json=" + JSON.stringify(json), {
            method: 'POST'
        })
        .then(response => response.blob())
        .then(blob => {
            let url = window.URL.createObjectURL(blob);
            let a = document.createElement('a');
            a.href = url;
            a.download = "menu.docx";
            document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
            a.click();
            a.remove();  //afterwards we remove the element again
        });


        // const response = fetch("/menu/generate?generate=" + doGenerate + "&json=" + JSON.stringify(json), "_blank", "fullscreen=yes"
        // , {
        //     method: 'GET'
        // });
    }

    function hasParent (elem, selector) {
        for ( ; elem && elem !== document; elem = elem.parentNode ) {
            if ( elem.matches( '#' + selector ) ) {
                return true;
            }
        }
        return false;
    }

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
        //ev.style.cursor = "move";
    }

    function delete_meal(ev) {
        ev.preventDefault();

        var data = ev.dataTransfer.getData("text");
        let dragged = document.getElementById(data);
        if (dragged.classList.contains( "copy" )){
            dragged.remove();
        }
    }

    let counter = 0;

    function drop(ev) {
        ev.preventDefault();

        var data = ev.dataTransfer.getData("text");
        let dragged = document.getElementById(data);

        let target = ev.target;

        if (target.classList.contains( "meal" )){
            target = ev.target.parentNode;
        }
        if (target.classList.contains( "food-header" )){
            // target = target.parentNode.getElementsByClassName("food-item")[0];
            target = target.nextElementSibling;
        }
        console.log(target);
        if (target.classList.contains( "delete-on-drop" )){
            delete_meal(ev);
            return;
        }

        if (hasParent(target, "foodList")) {
            let divsHolderId = "foodList_" + (dragged.getAttribute('data-type'));
            let divsHolder = document.getElementById(divsHolderId);
            divsHolder.appendChild(dragged);
        }
        // if (hasParent(target, "menuList")) {
        //     let divsHolderId = "menuList_" + (dragged.getAttribute('data-type'));
        //     let divsHolder = document.getElementById(divsHolderId);
        //     divsHolder.appendChild(dragged);
        // }
        else {
            if (!dragged.classList.contains("copy")) {
                dragged = dragged.cloneNode(true);
                dragged.id = dragged.id + "#" + counter++;
                dragged.classList.add("copy");            }
            target.appendChild(dragged);
        }
    }
</script>
{% endblock %}