{% extends 'base.html.twig' %}
{% block title %}Menu{% endblock %}
{% block stylesheets %}
    <style>
        .card-header {
            padding: 0px 5px 0px 5px;
        }

        .meal {
            border: 1px solid gray;
            cursor: grab;
            margin: 2px;
        }

        .food-header, .drop-container {
            margin-left: 5px;
        }

        .drop-container {
            min-height: 30px;
            border: 2px dashed #373A3C;
            border-radius: 5px;
            background-color: #F4F4F4;
            margin-bottom: 5px;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .menu-block {
            width: calc(100% - 30px);
        }

        #menuList {
            height: 63vh;
        }
        #foodList {
            height: 60vh;
        }

        #menuList, #foodList {
            overflow-y: scroll;
            padding-right: 10px;
        }

        .menu-block {
            float: left;
        }

        .col-left {
            /*padding-right: 0;*/
        }
        .col-right {
            padding-left: 0;
        }

        /* width */
        ::-webkit-scrollbar {
          width: 4px;
        }
        /* Track */
        ::-webkit-scrollbar-track {
          background: #f1f1f1;
        }
        /* Handle */
        ::-webkit-scrollbar-thumb {
          background: #888;
          border-radius: 6px;
        }
        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
          background: #555;
        }

        #foodList .used-meal {
            background-color: pink;
        }
    </style>
    <link id="bsdp-css" href="https://unpkg.com/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker3.min.css" rel="stylesheet">
{% endblock %}
{% block body %}
    <div class="menu-block">
        <div class="row menu-pick">
            <div id="food-picker" class="col col-left">
                <h1>Sestavení menu</h1>
                {{ include('parts/filter.html.twig') }}
                <div id="foodList" class="menu-header">
                    {% for type,foods in foods %}
                        <div id="foodList_{{ type }}" data-type="{{ type }}" class="food-list filter-type dragula get-container">
                            <h2 id="{{ type }}">{{ type }}</h2>
                            {% for food in foods %}
                                {# TODO bez toho prázdnýho možná no#}
                                {% set tags = "[ \"\" " %}
                                {% for tag in food.tags %}
                                    {% set tags = tags ~ ", \"" ~ tag.name ~ "\" "%}
                                {% endfor %}
                                {% set tags = tags ~ "]"%}
                                <div class="meal card-header filter-tags meal{{ food.id }}" id="meal{{ food.id }}" data-id="{{ food.id }}"
                                     data-type="{{ type }}" data-tags="{{ tags }}" data-description="{{ food.description }}">
                                        {{ food.name }}, {{ food.price }}
                                </div>
                            {% endfor %}
                        </div>
                    {% endfor %}
                </div>
            </div>

            <div class="col col-right">
                <h2>Jídelníček</h2>
                <div class="form-group row">
                    <label for="datepicker" class="col-form-label">Datum prvního dne menu</label>
                    <input id="datepicker" type="text" class="col ml-2 form-control form-control-sm">
                </div>
                <div id="page-content">
                    <div id="menuList">
                    {% for day in settings.days %}
                        <div class="day">
                            <h3 class="day-name" data-description="{{ day[1] }}">{{ day[0] }}</h3>
                            {% for meal in settings.meals %}
                                <h4 class="JSON-food-header food-header" data-type="{{ meal }}"{# ondrop="drop(event)"
                                    ondragover="allowDrop(event)"#}>{{ meal }}</h4>
                                <div class="JSON-food-items dragula drop-container {#food-items-drop#}" {#ondrop="drop(event)"
                                     ondragover="allowDrop(event)"#}></div>
                            {% endfor %}
                        </div>
                    {% endfor %}
    {#            <button onclick="getMenu()" class="btn btn-primary">Náhled</button>#}
                    </div>
                    <h3>Export</h3>
                    <form action="javascript:void(0);" class="form-inline mb-2">
                        <select class="form-control" id="export_template">
                            {% for template in templates %}
                                <option value="{{ template.path }}">{{ template.name }}</option>
                            {% endfor %}
                        </select>
                        <button onclick="generateMenu()" class="btn btn-success ml-1">Exportovat</button>
                        <button onclick="saveMenu()" class="btn btn-success ml-1">Uložit do historie</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="scrolling-block">
        <div id="scrolling" class="trash" {#ondrop="delete_meal(event)" ondragover="allowDrop(event)" #}>
            <i class="fa fa-trash" aria-hidden="true"></i>
        </div>
    </div>


{% endblock %}

{% block javascripts %}
    <script src="https://unpkg.com/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>
    <script src="https://unpkg.com/bootstrap-datepicker@1.9.0/dist/locales/bootstrap-datepicker.cs.min.js" charset="UTF-8"></script>
<script>
    // initialization

    $().ready(function() {
        document.getElementById('datepicker').value = get_nearest_monday();

        highlight_used_meals();

        $('#datepicker').datepicker({
            format: "dd. mm. yyyy",
            weekStart: 1,
            startDate: "-today",
            language: "cs",
            daysOfWeekHighlighted: "1",
            calendarWeeks: true,
            todayHighlight: true,
            autoclose: true,
            defaultViewDate: { year: 1977, month: 04, day: 25 }
        });

        // todo moc nepěkný
        $("#menuList").bind("DOMSubtreeModified", function() {
            update_url();
            highlight_used_meals();
        });

        $( "#menuList" ).change(function() {
        });
    });

    // functions
    function get_nearest_monday() {
        let today = new Date();
        while (today.getDay() !== 1) {
            today.setDate(today.getDate() + 1);
        }

        let dd = today.getDate();
        let mm = today.getMonth() + 1; //January is 0!

        let yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }
        if (mm < 10) {
            mm = '0' + mm;
        }
        return dd + '. ' + mm + '. ' + yyyy;
    }

    function get_date_separated($stringdate) {
        let regexpNames =  /(\d+). (\d+). (\d+)/mg;
        let match = regexpNames.exec($stringdate);
        return {dd: match[1], mm: match[2], yyyy: match[3]}
    }

    function saveMenu() {
        $("#loading").modal("show");
        update_url();
        console.log(document.getElementById('datepicker').value);
        let date_values = get_date_separated(document.getElementById('datepicker').value);
        let date = Date.parse(date_values.mm + '/' + date_values.dd + '/' + date_values.yyyy);
        date += 3600000; // fix timezone to GMT
        console.log(date);
        let data = {json: generate_json(), date: date};
        const response = fetch('/history/add', {
            method: 'POST', // or 'PUT'
            body: JSON.stringify(data), // data can be `string` or {object}!
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(res => window.location.reload());
    }

    let url = new URL(location.href);
    let json = url.searchParams.get('json');
    if (json != null) {
        update_menulist(JSON.parse(json))
    }
    let date = url.searchParams.get('date');
    if (date != null) {
        update_date(date);
    }

    function update_date(date) {
        document.getElementById('datepicker').value = date;
    }

    function update_menulist(json) {
        let menulist = document.getElementById('menuList');
        menulist.innerHTML='';
        let i = 0;
        while (json[i]) {
            // Název dnu
            let day =
                "<div class=\"day\">\n" +
                "     <h3 class=\"day-name\" data-description=\"" + json[i].description + "\">" + json[i].day +"</h3>\n";

            let j = 0;
            while (json[i].meals[j]) {
                // název typu jídla
                day += "<h4 class=\"JSON-food-header food-header\" data-type=\""+ json[i].meals[j].type +"\">"+ json[i].meals[j].type +"</h4>";
                // kontejner na jídla
                day += "<div class=\"JSON-food-items dragula drop-container\">";

                let k = 0;
                while (json[i].meals[j].meals[k]) {
                    let food = document.getElementById("meal" + json[i].meals[j].meals[k].id);
                    food.classList.add("copy");
                    food.classList.remove("filter-tags");
                    food.classList.remove("original");
                    if (food) {
                        day += food.outerHTML;
                    }
                    k++;
                }

                day += "</div>"; // kontejner na jídla
                j++;
            }

            day += "</div>"; // název dnu
            menulist.innerHTML += day;
            i++;
        }
    }

    function update_url() {
        let url = new URL(location.href);
        let json = generate_json();
        url.searchParams.set('json', JSON.stringify(json));
        //TODO ječí to
        window.history.pushState('test', 'Title', url);
    }

    function generate_json() {
        let menuList = document.getElementById("menuList");
        let menuDays = menuList.children;

        let menu = [];

        for (let i = 0; i < menuDays.length; i++) {
            let menuDay = menuDays[i].children;
            let day = {day: "", meals: []};
            let type = {type: "", meals: []};

            for (let j = 0; j < menuDay.length; j++) {
                let menuDayItem = menuDay[j];
                if (menuDayItem.classList.contains("day-name")) {
                    day.day = menuDayItem.innerText;
                    day.description = menuDayItem.getAttribute('data-description');

                } else if (menuDayItem.classList.contains("JSON-food-header")){
                    if (type.type !== "") {
                        // kopie objektu, jinak by se uložila pouze reference
                        let cloneType = Object.assign({}, type);
                        day.meals.push(cloneType);
                        type.meals = [];
                    }
                    //type.name= menuDayItem.getAttribute("data-type");
                    type.type= menuDayItem.innerText;

                } else if (menuDayItem.classList.contains("JSON-food-items")){
                    let menuMeals = menuDayItem.children;
                    for (let k = 0; k < menuMeals.length; k++) {
                        //let meal = {id: menuMeals[k].getAttribute('data-id'), text: menuMeals[k].innerText};
                        let meal = {id: menuMeals[k].getAttribute('data-id')};
                        type.meals.push(meal);
                    }
                }
            }
            day.meals.push(type);
            menu.push(day);
        }
        return menu;
    }

    function getMenu() {
        let json = generate_json();
        window.open("/menu/generate?generate=false&json=" + JSON.stringify(json), "_blank", "fullscreen=yes");
    }

    async function  generateMenu () {
        let json = generate_json();
        //let template = "words/template.docx";
        let template = document.getElementById("export_template").value;
        // window.open("/menu/generate?generate=true&json=" + JSON.stringify(json),
        //     "_blank", "width=10,height=10,top=30,left=200");
        fetch("/menu/generate?generate=true&template=" + template +"&json=" + JSON.stringify(json), {
            method: 'POST'
        })
        .then(response => response.blob())
        .then(blob => {
            let url = window.URL.createObjectURL(blob);
            let a = document.createElement('a');
            a.href = url;
            a.download = "menu.docx";
            document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
            a.click();
            a.remove();  //afterwards we remove the element again
        });


        // const response = fetch("/menu/generate?generate=" + doGenerate + "&json=" + JSON.stringify(json), "_blank", "fullscreen=yes"
        // , {
        //     method: 'GET'
        // });
    }

    function hasParent (elem, selector) {
        for ( ; elem && elem !== document; elem = elem.parentNode ) {
            if ( elem.matches( '#' + selector ) ) {
                return true;
            }
        }
        return false;
    }

    function highlight_used_meals(){
        let $highlighted_meals = $('.used-meal');
        $highlighted_meals.each(function() {
            $(this).removeClass("used-meal");
        });

        let $menulist_meals = $('#menuList .meal');
        $menulist_meals.each(function () {
            let $meal_id = "#" + $(this).attr('id');
            $($meal_id).addClass("used-meal");
            console.log($(this).attr('id'));
        })
    }

    let boxArray = document.getElementsByClassName("dragula");
    let boxes = Array.prototype.slice.call(boxArray);
    dragula([document.getElementById("foodList"), document.getElementsByClassName("drop-container")], {
        containers: boxes,
        copy: function (el, source) {
            if (el.classList.contains("meal")) {
                return source.classList.contains('get-container');
            } else {
                return false;
            }
        },
        accepts: function (el, target) {
            return target.classList.contains('drop-container');
        },
        removeOnSpill: true,
        ignoreInputTextSelection: false
    });


</script>
{% endblock %}