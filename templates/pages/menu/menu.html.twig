{% extends 'base.html.twig' %}
{% block title %}Menu{% endblock %}
{% block stylesheets %}
    <style>
        .card-header {
            padding: 0px 5px 0px 5px;
        }

        .meal {
            border: 1px solid gray;
            cursor: grab;
            margin: 2px;
        }

        .food-header, .food-items-drop {
            margin-left: 5px;
        }

        .food-items-drop:empty {
            min-height: 30px;
        }

        .food-items-drop {
            border: 2px dashed #373A3C;
            border-radius: 5px;
            background-color: #F4F4F4;
            margin-bottom: 5px;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
        }

        .menu-block {
            width: calc(100% - 30px);
        }

        .trash-block {
            width: 30px;
        }

        /*filters*/
        .tag-filter-item, .type-filter-item {
            cursor: pointer;
        }
        .type-filter-item {
            margin-right: 1px;
            padding-top: 3px;
            padding-bottom: 3px;
            background-color: #373A3C;
            color: white;
            text-align: center;
        }

        .trash-block i {
            font-size: 30px;
            position:sticky;
            text-align: center;
        }
        #menuList, #foodList {
            height: 70vh;
            overflow-y: scroll;
            padding-right: 10px;
        }

        .menu-block, .trash-block {
            float: left;
        }

        .col-left {
            /*padding-right: 0;*/
        }
        .col-right {
            padding-left: 0;
        }

        /* width */
        ::-webkit-scrollbar {
          width: 4px;
        }
        /* Track */
        ::-webkit-scrollbar-track {
          background: #f1f1f1;
        }
        /* Handle */
        ::-webkit-scrollbar-thumb {
          background: #888;
          border-radius: 6px;
        }
        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
          background: #555;
        }
    </style>
{% endblock %}
{% block body %}
    <div class="menu-block">
        <div class="row menu-pick">
            <div id="food-picker" class="col col-left">
                <h1>Sestavení menu</h1>
                <input class="form-control form-control-sm" type="text" placeholder="Vyhledávání..." id="food-finder">
                <button class="btn btn-link p-0 m-0" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">Filtry</button>
                <div  class="collapse" id="collapseExample">
                    <div class="row type-filter">
                        <div class="col type-filter-item">
                            Vše
                        </div>
                        {% for type in types %}
                            <div class="col type-filter-item">
                                {{ type.name }}
                            </div>
                        {% endfor %}
                    </div>
                    <div class="row tag-filter">
                        {% for tag in tags %}
                            <span class="tag-filter-item badge badge-success m-1">
                                {{ tag.name }}
                            </span>
                        {% endfor %}
                    </div>
                </div>
                <div id="foodList" class="menu-header delete-on-drop" ondrop="drop(event)" ondragover="allowDrop(event)" >
                    {% for type,foods in foods %}
                        <h2 id="{{ type }}">{{ type }}</h2>
                        <div id="foodList_{{ type }}" class="food-list delete-on-drop" ondrop="drop(event)" ondragover="allowDrop(event)">
                        {% for food in foods %}
                            <div class="meal card-header" id="meal{{ food.id }}" data-id="{{ food.id }}" data-type="{{ type }}" draggable="true" ondragstart="drag(event)">
                                {{ food.name }}, {{ food.price }}
                            </div>
                        {% endfor %}
                        </div>
                    {% endfor %}
                </div>
            </div>

            <div class="col col-right">
                <h2>Jídelníček</h2>
                <div id="page-content">
                    <div id="menuList">
                    {% for day in settings.days %}
                        <div class="day">
                            <h3 class="day-name">{{ day }}</h3>
                            {% for meal in settings.meals %}
                                <h4 class="JSON-food-header food-header" data-type="{{ meal }}" ondrop="drop(event)" ondragover="allowDrop(event)">{{ meal }}</h4>
                                <div class="JSON-food-items food-items-drop" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
                            {% endfor %}
                        </div>
                    {% endfor %}
    {#            <button onclick="getMenu()" class="btn btn-primary">Náhled</button>#}
                    </div>
                    <button onclick="generateMenu()" class="btn btn-success">Exportovat .doc</button>
                </div>
            </div>
        </div>
    </div>
    <div class="trash-block">
        <div id="trash" ondrop="delete_meal(event)" ondragover="allowDrop(event)">
            <i class="fa fa-trash" aria-hidden="true"></i>
        </div>
    </div>


{% endblock %}

{% block javascripts %}
<script>
    $().ready(function() {
		var $scrollingDiv = $("#trash");
		$(window).scroll(function(){
		    if ($(window).scrollTop() > $("#main-nav").height()) {
                $scrollingDiv
                    .stop()
                    .animate({"marginTop": ($(window).scrollTop() - $("#main-nav").height()) + "px"}, "fast" );
            }
		});
	});

    function generate_json() {
        let menuList = document.getElementById("menuList");
        let menuDays = menuList.children;

        let menu = [];

        for (let i = 0; i < menuDays.length; i++) {
            let menuDay = menuDays[i].children;
            let day = {day: "", meals: []};
            let type = {type: "", meals: []};

            for (let j = 0; j < menuDay.length; j++) {
                let menuDayItem = menuDay[j];
                if (menuDayItem.classList.contains("day-name")) {
                    day.day = menuDayItem.innerText;

                } else if (menuDayItem.classList.contains("JSON-food-header")){
                    if (type.type !== "") {
                        // kopie objektu, jinak by se uložila pouze reference
                        let cloneType = Object.assign({}, type);
                        day.meals.push(cloneType);
                        type.meals = [];
                    }
                    //type.name= menuDayItem.getAttribute("data-type");
                    type.type= menuDayItem.innerText;

                } else if (menuDayItem.classList.contains("JSON-food-items")){
                    let menuMeals = menuDayItem.children;
                    for (let k = 0; k < menuMeals.length; k++) {
                        let meal = {id: menuMeals[k].getAttribute('data-id'), text: menuMeals[k].innerText};
                        type.meals.push(meal);
                    }
                }
            }
            day.meals.push(type);
            menu.push(day);
        }
        return menu;
    }

        // for html_to_doc
    // function generate_json_old() {
    //     let menuList = document.getElementById("menuList");
    //     let menuDays = menuList.children;
    //
    //     let menu = [];
    //
    //     for (let i = 0; i < menuDays.length; i++) {
    //         let menuDay = menuDays[i].children;
    //         let day = {name: "", meals: []};
    //         let type = {name: "", meals: []};
    //
    //         for (let j = 0; j < menuDay.length; j++) {
    //             let menuDayItem = menuDay[j];
    //             if (menuDayItem.classList.contains("day-name")) {
    //                 day.name = menuDayItem.innerText;
    //
    //             } else if (menuDayItem.classList.contains("food-header")){
    //                 if (type.name !== "") {
    //                     // kopie objektu, jinak by se uložila pouze reference
    //                     let cloneType = Object.assign({}, type);
    //                     day.meals.push(cloneType);
    //                     type.meals = [];
    //                 }
    //                 //type.name= menuDayItem.getAttribute("data-type");
    //                 type.name= menuDayItem.innerText;
    //
    //             } else if (menuDayItem.classList.contains("food-item")){
    //                 let menuMeals = menuDayItem.children;
    //                 for (let k = 0; k < menuMeals.length; k++) {
    //                     let meal = {id: menuMeals[k].id, name: menuMeals[k].innerText};
    //                     type.meals.push(meal);
    //                 }
    //             }
    //         }
    //         day.meals.push(type);
    //         menu.push(day);
    //     }
    //     console.log(menu);
    //     return menu;
    // }


    function getMenu() {
        let json = generate_json();
        window.open("/menu/generate?generate=false&json=" + JSON.stringify(json), "_blank", "fullscreen=yes");
    }

    async function generateMenu () {
        let json = generate_json();
        // window.open("/menu/generate?generate=true&json=" + JSON.stringify(json),
        //     "_blank", "width=10,height=10,top=30,left=200");
        fetch("/menu/generate?generate=true&json=" + JSON.stringify(json), {
            method: 'POST'
        })
        .then(response => response.blob())
        .then(blob => {
            let url = window.URL.createObjectURL(blob);
            let a = document.createElement('a');
            a.href = url;
            a.download = "menu.docx";
            document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
            a.click();
            a.remove();  //afterwards we remove the element again
        });


        // const response = fetch("/menu/generate?generate=" + doGenerate + "&json=" + JSON.stringify(json), "_blank", "fullscreen=yes"
        // , {
        //     method: 'GET'
        // });
    }

    function hasParent (elem, selector) {
        for ( ; elem && elem !== document; elem = elem.parentNode ) {
            if ( elem.matches( '#' + selector ) ) {
                return true;
            }
        }
        return false;
    }

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
        //ev.style.cursor = "move";
    }

    function delete_meal(ev) {
        ev.preventDefault();

        var data = ev.dataTransfer.getData("text");
        let dragged = document.getElementById(data);
        if (dragged.classList.contains( "copy" )){
            dragged.remove();
        }
    }

    let counter = 0;

    function drop(ev) {
        ev.preventDefault();

        var data = ev.dataTransfer.getData("text");
        let dragged = document.getElementById(data);

        let target = ev.target;

        if (target.classList.contains( "meal" )){
            target = ev.target.parentNode;
        }
        if (target.classList.contains( "food-header" )){
            // target = target.parentNode.getElementsByClassName("food-item")[0];
            target = target.nextElementSibling;
        }
        if (target.classList.contains( "delete-on-drop" )){
            delete_meal(ev);
            return;
        }

        if (hasParent(target, "foodList")) {
            let divsHolderId = "foodList_" + (dragged.getAttribute('data-type'));
            let divsHolder = document.getElementById(divsHolderId);
            divsHolder.appendChild(dragged);
        }
        // if (hasParent(target, "menuList")) {
        //     let divsHolderId = "menuList_" + (dragged.getAttribute('data-type'));
        //     let divsHolder = document.getElementById(divsHolderId);
        //     divsHolder.appendChild(dragged);
        // }
        else {
            if (!dragged.classList.contains("copy")) {
                dragged = dragged.cloneNode(true);
                dragged.id = dragged.id + "#" + counter++;
                dragged.classList.add("copy");            }
            target.appendChild(dragged);
        }
    }
</script>
{% endblock %}