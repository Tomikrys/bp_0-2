{% extends 'base.html.twig' %}
{% block title %}Seznam jídel{% endblock %}
{% block stylesheets %}
    <style>
        .food_description {
            max-width: 300px;
        }

        #filters {
            max-width: 700px;
            margin-bottom: 10px;
        }

        .foods-block {
            width: calc(100% - 35px);
            float: left;
        }
        .edit_buttons {
            width: 35px;
            margin-left: 5px;
        }
        .edit_buttons button {
            width: 35px;
            margin-bottom: 5px;
            padding: 5px 0px 5px 0px;
        }

        .edit_buttons i {
            font-size: 17px;
        }

        .select_food_style {
            padding-top: 10px;
            width:18px;
            height:18px;
            border-radius:8px;
        }


        #form_tags {
            -webkit-column-count: 3;
            -moz-column-count: 3;
            column-count: 3;
        }

        #editMultipleFoodsModal .edit_multiple_foods_tag_form {
            -webkit-column-count: 2;
            -moz-column-count: 2;
            column-count: 2;
        }
        @media only screen and (max-width: 1000px) {
            #editMultipleFoodsModal .edit_multiple_foods_tag_form {
                -webkit-column-count: 1;
                -moz-column-count: 1;
                column-count: 1;
            }
        }
        @media only screen and (max-width: 1000px) {
            .modal-lg {
                max-width: 700px;
            }
        }
        #form_tags label {
            display: block;
            float: left;
            margin: 0px;
        }
        .add_tag_modal_checkbox {
            display: block;
            float: left;
            clear: both;

            padding: 0;
            margin-top: 4px;
            margin-right: 5px;
        }
        .add_tag_modal_button {
            clear: both;
            float: right;
        }
        .missing_input {
            box-shadow: 1px 1px 5px #de1111;
        }

        .changed {
            border-right: 2px solid #ffc107;
        }

        table.sortable thead th:not(.sorttable_sorted):not(.sorttable_sorted_reverse):not(.sorttable_nosort):after {
            content: " \25B4\034F\25BE"
        }

        .pretty {
            margin-right: 0px;
        }

        tbody .pretty {
            font-size: 18px;
        }
    </style>
{% endblock %}
{% block body %}
    <h1>Foods</h1>
    <div id="filters" class="col">
        {{ include('parts/filter.html.twig') }}
    </div>
    <div class="mb-2">
        <button class="btn btn-danger delete_selected" onclick="delete_selected()">Odstranit vybrané</button>
        <button class="btn btn-info edit_selected" onclick="edit_selected()">Editovat vybrané</button>
        <button type="button" class="btn btn-success" onclick="add_row_for_new_food()">Přidat řádek</button>
        <button type="button" class="btn btn-warning" onclick="save_all_changed()">Uložit změny</button>
    </div>

    <div class="foods-block">
        <p><small>Pokud chcete upravovat tagy je třeba nejprve uložit všechny předchozí změny.</small></p>
        {{ include('pages/foods/parts/table.html.twig') }}

        {{ include('pages/foods/parts/formAddTagModal.html.twig') }}
        {{ include('pages/foods/parts/editMultipleFoodsModal.twig') }}
        <small>Hromadné změny mohou trochu haprovat.</small>
        <div class="mb-2">
            <button class="btn btn-danger delete_selected" onclick="delete_selected()">Odstranit vybrané</button>
            <button class="btn btn-info edit_selected" onclick="edit_selected()">Editovat vybrané</button>
            <button type="button" class="btn btn-success" onclick="add_row_for_new_food()">Přidat řádek</button>
            <button type="button" class="btn btn-warning" onclick="save_all_changed()">Uložit změny</button>
        </div>
    </div>
    <div class="scrolling-block">
        <div id="scrolling" class="edit_buttons">
            <button class="btn btn-danger delete_selected" onclick="delete_selected()">
                <i class="fa fa-trash" aria-hidden="true"></i>
            </button>
            <button class="btn btn-info edit_selected" onclick="edit_selected()">
                <i class="fa fa-edit" aria-hidden="true"></i>
            </button>
            <button type="button" class="btn btn-success" onclick="add_row_for_new_food()">
                <i class="fa fa-plus" aria-hidden="true"></i>
            </button>
            <button type="button" class="btn btn-warning" onclick="save_all_changed()">
                <i class="fa fa-save" aria-hidden="true"></i>
            </button>
        </div>
    </div>

{% endblock %}
{% block javascripts %}
    <script>
        let force_refresh = false;
        let lastChecked, $lastChecked_check,
            $boxes;
        $(document).ready(function() {
            const foods = document.getElementById('foods');
            if (foods) {
                //    deleting item
                foods.addEventListener('click', e => {
                    const id = e.target.getAttribute('data-id');
                    if ($(e.target).hasClass('delete-food')) {
                        if (confirm('Opravdu?')) {
                            delete_food(id);
                        }
                    }
                    // adding item
                    if ($(e.target).hasClass('add-food')) {
                        add_food(id);
                    }

                    // editing item
                    if ($(e.target).hasClass('edit-food')) {
                        edit_food(id).then(
                            () => {window.location.reload();}
                        );
                    }

                    // adding tag
                    if ($(e.target).hasClass('add-tag')) {
                        alert('tag');
                        add_tag(e);
                    }
                });
                $('#select_all_foods').on("click", function () {
                    toggle_all_checkboxes(this);
                    manage_avaliability_of_edit_and_delete_button();
                });
            }

            only_numbers_listener();
            manage_avaliability_of_edit_and_delete_button();

            $('#foods tr').on("DOMSubtreeModified", function(){
                add_to_changed_foods(this);
            });

            $('#foods input.select_food').on("click", function(){
                select_food(this.closest("tr").id);
                manage_avaliability_of_edit_and_delete_button();
            });

            $('#foods .food_types select.food_type').on("click", function(){
                add_to_changed_foods(this.closest("tr"));
            });


            $('.tag-filter-item').on("click", function(){
                clear_selected_foods();
                initialize_shift_checkbox_feture();
            });
            $('.type-filter-item').on("click", function(){
                clear_selected_foods();
                initialize_shift_checkbox_feture();
            });
            $('#food-finder').on("keyup", function(){
                clear_selected_foods();
                initialize_shift_checkbox_feture();
            });

            initialize_shift_checkbox_feture();

            $boxes.click(function(evt) {
                let ret = false;
                if(!lastChecked) {
                    lastChecked = this;
                    ret = true;
                }
                if(!$lastChecked_check) {
                    $lastChecked_check = $(this);
                    ret = true;
                }
                if (ret) {return;}

                if(evt.shiftKey) {
                    var start = $boxes.index(this),
                        end = $boxes.index(lastChecked);
                    let $checkboxes = $boxes.slice(Math.min(start, end), Math.max(start, end) + 1);
                    $checkboxes.each( function() {
                        $(this).prop('checked', $lastChecked_check.prop("checked"));
                    });
                }

                $lastChecked_check = $(this);
                lastChecked = this;
            });
        });

        function initialize_shift_checkbox_feture() {
            $boxes = $('input[type="checkbox"].select_food:visible');
        }

        function delete_food(id, resolve = null) {
            $("#loading").modal("show");

            fetch(`/foods/delete/${id}`, {
                method: 'DELETE'
            }).then(
                () => {
                    if (resolve) {
                        resolve("done");
                    }
                });
        }

        // function edit_tags(e) {
        //     $("#loading").modal("show");
        //         fetch(`/foods/${id}/editTags`, {
        //             method: 'PATCH'
        //         }).then(res => window.location.reload());
        //     $("#loading").modal("hide");
        // }

        function edit_food(id, price = null, type = null, resolve = null) {
            $("#loading").modal("show");
            // vytežení infa z tabulky
            const name = document.getElementById(id).getElementsByClassName("food_name")[0].innerText;
            const description = document.getElementById(id).getElementsByClassName("food_description")[0].innerText;
            if (!price) {
                price = document.getElementById(id).getElementsByClassName("food_price")[0].innerText;
            }

            // řešení selektu
            if (!type) {
                var selector = document.getElementById(id).getElementsByClassName("food_type")[0];
                type = selector[selector.selectedIndex].getAttribute('data-id');
            }

            // nacpání do struktury
            const data = {
                id: id,
                name: name,
                description: description,
                price: price,
                type: type
            };

            // odeslání do FoodController
            try {
                fetch('/foods/edit', {
                    method: 'PATCH', // or 'PUT'
                    body: JSON.stringify(data), // data can be `string` or {object}!
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(()=> {
                    console.log('Success edit_food');
                    if (resolve) {
                        resolve("done");
                    }
                });
            } catch (error) {
                console.error('Error:', error);
                if (resolve) {
                    resolve("error");
                }
            }
        }

        function edit_tags(id, add_tags, remove_other_tags, resolve = null) {
            // nacpání do struktury
            const data = {
                id: id,
                add_tags: add_tags,
                remove_other_tags: remove_other_tags,
            };
            // odeslání do FoodController
            try {
                fetch('/foods/edit-tags', {
                    method: 'PATCH', // or 'PUT'
                    body: JSON.stringify(data), // data can be `string` or {object}!
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(()=> {
                    console.log('Success edit_tags');
                    if (resolve) {
                        resolve("done");
                    }
                });
            } catch (error) {
                console.error('Error:', error);
                if (resolve) {
                    resolve("error");
                }
            }
        }

        // přidání řádku a buňek do tabulky
        function add_row_for_new_food() {
            const foods = document.getElementById('foods');
            var row = foods.insertRow(-1);
            var cell_name =         row.insertCell(0);
            var cell_description =  row.insertCell(1);
            var cell_price =        row.insertCell(2);
            var cell_tags =         row.insertCell(3);
            var cell_type =         row.insertCell(4);
            var cell_buttons =      row.insertCell(5);

            // přidání "editovatelnosti"
            var editable = document.createAttribute("contenteditable");
            editable.value = "true";
            var editable2 = document.createAttribute("contenteditable");
            editable2.value = "true";
            var editable3 = document.createAttribute("contenteditable");
            editable3.value = "true";

            let id = "adding";
            let i = 0;
            while (document.getElementById(id)) {
                id = "adding" + i;
                i += 1;
                //console.log(id);
            }

            row.id = id;
            row.classList.add("adding_row");

            cell_name.classList.add("food_name");
            cell_name.classList.add("font-weight-bold");
            cell_name.attributes.setNamedItem(editable);

            cell_description.classList.add("food_description");
            cell_description.attributes.setNamedItem(editable2);

            cell_price.innerHTML = " ";
            cell_price.classList.add("food_price");
            cell_price.classList.add("only-numbers");
            cell_price.attributes.setNamedItem(editable3);

            cell_tags.innerHTML = "<small>Tagy lze přidat až po uložení</small>";

            // řešení selektu
            cell_type.innerHTML =
                '<select class="food_type form-control">\n' +
                '   <option selected></option>' +
                '   {% for type in types %}\n'+
                '       <option data-id="{{ type.id }}">{{ type.name }}</option>\n'+
                '   {% endfor %}\n'+
                '</select>';

            // tlačítko k uložení
            // TODO ym2nit na k596ek na odstran2n9

            //cell_buttons.innerHTML = '<a href=\"#\" data-id=\"' + id + '\" class=\"btn btn-sm btn-primary add-food\">Uložit</a>';
            cell_buttons.outerHTML = "<td onclick=\"delete_row(this)\" class=\"cursor_pointer text-center\"><i class=\"fas fa-times\"></i></td>"
            //$('html', 'body').animate({scrollTop: $('footer').offset().top}, 'fast');
            window.scrollTo(0, document.body.scrollHeight);

            only_numbers_listener();
        }

        // funke k přidání jídla
        function add_food(id, resolve = null) {
            //console.log(id);
            $("#loading").modal("show");
            // vytáhne si z přidaného řádku info
            const name = document.getElementById(id).getElementsByClassName("food_name")[0].innerText;
            const description = document.getElementById(id).getElementsByClassName("food_description")[0].innerText;
            const price = document.getElementById(id).getElementsByClassName("food_price")[0].innerText;
            const selector = document.getElementById(id).getElementsByClassName("food_type")[0];
            const type = selector[selector.selectedIndex].getAttribute('data-id');
            // napere to do struktury
            const food = {
                id: id,
                name: name,
                description: description,
                price: price,
                type: type
            };
            // pošle do FoodControlleru
            try {
                const response = fetch('/foods/add', {
                    method: 'POST',
                    body: JSON.stringify(food),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(
                    () => {
                        console.log('Success');
                        if (resolve) {
                            resolve("done");
                        }
                    });
            } catch (error) {
                console.error('Error:', error);
            }
            $("#loading").modal("hide");
        }

        function add_tag(e) {
            //TODO sranda, d2l8 to random v2ci xD
            let food_id = $(e).data('id');
            let form = document.getElementById("form_tags");
            let checkboxes = form.getElementsByClassName("form-checkbox");
            for (let i = 0; i < checkboxes.length; i++) {
                checkboxes[i].checked = false;
            }
            document.getElementById(food_id).querySelectorAll('.food_tag').forEach(
                function(e) {
                    let tag_id = e.getAttribute('data-id');
                    for (let i = 0; i < checkboxes.length; i++) {
                        //console.log([checkboxes[i].getAttribute('value'), tag_id]);
                        if (checkboxes[i].getAttribute('value') === tag_id) {
                            checkboxes[i].checked = true;
                        }
                    }
                }
            );
            document.getElementById('form_id').value = food_id;
            $("#addTagFormModal").modal("show");

            //$("#addTagFormModal").modal("hide");
        }

        function push_if_not_there(array, element) {
            if (array.indexOf(element) === -1) {
                array.push(element);
            }
        }

        function remove_from_array(array, element) {
            let index = array.indexOf(element);
            if (index > -1) {
                array.splice(index, 1);
            }
        }

        function isNumber(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function only_numbers_listener() {
        $(".only-numbers").keydown(function (event) {
            // Allow: backspace, delete, tab, escape, and enter
            if (event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 ||
                // Allow: Ctrl+A
                (event.keyCode == 65 && event.ctrlKey === true) ||
                // Allow: home, end, left, right
                (event.keyCode >= 35 && event.keyCode <= 39)) {
                // let it happen, don't do anything
                return;
            }
            let numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
            if (!numbers.includes(event.key)) {
                event.preventDefault();
            }
        });
    }

    let changed_foods = [];
    function add_to_changed_foods(e) {
      push_if_not_there(changed_foods, e.id);
      e.classList.add("changed");
      //console.log(changed_foods);
    }


    function save_all_changed() {
        let all_good = true;

        changed_foods.forEach(function (food) {
            if (check_row(food) === false) {
                all_good = false;
            }
        });

        let adding_foods = document.getElementsByClassName("adding_row");
        console.log(adding_foods);

        for(let i = 0; i < adding_foods.length; i++) {
            if (check_row(adding_foods[i].id) === false) {
                all_good = false;
            }
        }

        if (all_good) {
            let all_promises = [];
            changed_foods.forEach(function (food) {
                let promise = new Promise(function(resolve, reject) {
                    edit_food(food, null, null, resolve);
                });
                all_promises.push(promise);
            });

            for(let i = 0; i < adding_foods.length; i++) {
                let promise = new Promise(function(resolve, reject) {
                    add_food(adding_foods[i].id, resolve);
                });
                all_promises.push(promise);
            }

            Promise.all(all_promises).then(() => {
                force_refresh = true;
                window.location.reload();
            });
        }
    }

    function check_row(id) {
        let ret = true;
        let $food_name = $("#"+ id + " .food_name");
        $food_name.removeClass("missing_input");
        if ($food_name.text() === '') {
            $food_name.addClass("missing_input");
            ret = false;
        }

        let $food_price = $("#"+ id + " .food_price");
        $food_price.removeClass("missing_input");
        if ($food_price.text() == 0) {
            $food_price.addClass("missing_input");
            ret = false;
        }

        let $food_type = $("#"+ id + " .food_type");
        $food_type.removeClass("missing_input");
        if ($food_type.val() === '') {
            $food_type.addClass("missing_input");
            ret = false;
        }

        return ret;
    }

    let selected_foods = [];
    function select_food(id) {
      push_if_not_there(selected_foods, id);
      let selector = '#' + id;
      let $input = $("#" + id).find("input.select_food").get()[0];
      //console.log($input.checked);
      if (!$input.checked) {
          remove_from_array(selected_foods, id);
      }
      //console.log(selected_foods);
    }

    function delete_selected() {
        let all_promises = [];
        if (confirm('Opravdu chcete smazat jídla? počet: ' + selected_foods.length)) {
          selected_foods.forEach(function (id) {
              let promise = new Promise(function(resolve, reject) {
                  delete_food(id, resolve);
              });
              all_promises.push(promise);
          });
        }
        Promise.all(all_promises).then(() => {
            force_refresh = true;
            window.location.reload();
        });
    }

    function clear_selected_foods() {
      let foods = document.getElementById("foods");
      let checkboxes = foods.getElementsByClassName("select_food");
      for (let i = 0; i < checkboxes.length; i++) {
          checkboxes[i].checked = false;
      }
      selected_foods = [];
      document.getElementById("select_all_foods").checked = false;
    }

    function isVisible(e) {
      return !!( e.offsetWidth || e.offsetHeight || e.getClientRects().length );
    }

    function set_selected_foods() {
      let foods = document.getElementById("foods");
      let checkboxes = foods.getElementsByClassName("select_food");
      for (let i = 0; i < checkboxes.length; i++) {
          if (isVisible(checkboxes[i])) {
              checkboxes[i].checked = true;
              select_food(checkboxes[i].getAttribute("data-id"));
          }
      }
    }

    function toggle_all_checkboxes($checkbox) {
      let $status = $checkbox.checked;
      if ($status) {
          set_selected_foods();
      } else {
          clear_selected_foods()
      }
    }

    function manage_avaliability_of_edit_and_delete_button() {
      let foods = document.getElementById("foods");
      let checkboxes = foods.getElementsByClassName("select_food");
      let hidden_flag = false;
      for (let i = 0; i < checkboxes.length; i++) {
          if (isVisible(checkboxes[i]) && checkboxes[i].checked) {
              hidden_flag = true;
          }
      }
      if (hidden_flag) {
          $(".delete_selected").prop('disabled', false);
          $(".edit_selected").prop('disabled', false);
      } else {
          $(".delete_selected").prop('disabled', true);
          $(".edit_selected").prop('disabled', true);
      }
    }

    function select_right_tags () {
      let form_add = document.getElementById("editFoodFormAddTag").getElementsByClassName("edit_multiple_foods_tag_form")[0];
      let form_add_checkboxes = form_add.getElementsByClassName("form-checkbox");
      for (let i = 0; i < form_add_checkboxes.length; i++) {
          form_add_checkboxes[i].checked = false;
          form_add_checkboxes[i].disabled = false;
      }

      let form_remove = document.getElementById("editFoodFormRemoveTag").getElementsByClassName("edit_multiple_foods_tag_form")[0];
      let form_remove_checkboxes = form_remove.getElementsByClassName("form-checkbox");
      for (let i = 0; i < form_remove_checkboxes.length; i++) {
          form_remove_checkboxes[i].checked = false;
          form_remove_checkboxes[i].disabled = false;
      }

      let all_tags_unique = [];
      let all_tags = [];
      selected_foods.forEach(function (food_id) {
          document.getElementById(food_id).querySelectorAll('.food_tag').forEach(
              function(food) {
                  let tag_id = food.getAttribute('data-id');
                  push_if_not_there(all_tags_unique, tag_id);
                  all_tags.push(tag_id);
              }
          );
      });

      for (let i = 0; i < form_add_checkboxes.length; i++) {
          let checkbox_value =  form_add_checkboxes[i].getAttribute('value');
          if (all_tags.filter(i => i === checkbox_value).length === selected_foods.length) {
              form_add_checkboxes[i].checked = true;
              form_add_checkboxes[i].disabled = true;
          }
      }

      for (let i = 0; i < form_remove_checkboxes.length; i++) {
          if (all_tags_unique.indexOf(form_remove_checkboxes[i].getAttribute('value')) !== -1) {
              form_remove_checkboxes[i].checked = true;
          } else {
              form_remove_checkboxes[i].disabled = true;
          }
      }
    }

    function select_right_type() {
      let first_run = true;
      let all_types = null;
      let types_flag = true;
      selected_foods.forEach(function (food_id) {
          let selector = document.getElementById(food_id).getElementsByClassName("food_type")[0];
          let type = selector[selector.selectedIndex].value;
          if (first_run) {
              first_run = false;
              all_types = type;
          } else {
              if (all_types !== type) {
                  types_flag = false;
              }
          }
      });
      if (types_flag) {
          $("#multiple_edit_types").val(all_types);
      } else {
          $("#multiple_edit_types").val("");
      }
    }

    function select_right_price() {
      let first_run = true;
      let all_prices = null;
      let prices_flag = true;
      selected_foods.forEach(function (food_id) {
          const price = document.getElementById(food_id).getElementsByClassName("food_price")[0].innerText;
          if (first_run) {
              first_run = false;
              all_prices = price;
          } else {
              if (all_prices !== price) {
                  prices_flag = false;
              }
          }
      });
      if (prices_flag) {
          $("#multiple_edit_price").val(all_prices);
      } else {
          $("#multiple_edit_price").val("");
      }
    }

    function edit_selected() {
      select_right_tags();
      select_right_type();
      select_right_price();
      $("#multiple_edit_count").text(selected_foods.length);

      $("#editMultipleFoodsModal").modal("show");
    }

    function save_multiple_changes() {
      $("#loading").modal("show");
      let price = $("#multiple_edit_price").val();
      const selector = document.getElementById("multiple_edit_types");
      const type = selector[selector.selectedIndex].getAttribute('data-id');

      let $add_tags = [];
      $("#editFoodFormAddTag input.add_tag_modal_checkbox").each(function () {
          if ($(this).is(':checked') && $(this).is(':enabled')) {
              $add_tags.push($(this).val());
          }
      });

      let $remove_other_tags = [];
      $("#editFoodFormRemoveTag input.add_tag_modal_checkbox").each(function () {
          if ($(this).is(':checked') && $(this).is(':enabled')) {
              $remove_other_tags.push($(this).val());
          }
      });

      call_edits (price, type, $add_tags, $remove_other_tags);
    }

    function call_edits (price, type, $add_tags, $remove_other_tags) {
      let all_promises = [];
      for (const food_id of selected_foods) {
          let promise;
          if (price || type) {
              promise = new Promise(function(resolve, reject) {
                  edit_food(food_id, price, type, resolve)
              });
              all_promises.push(promise);
          }

          //console.log($remove_other_tags);
          //console.log($add_tags);
          if ($add_tags !== [] || $remove_other_tags !== []) {
              promise = new Promise(function (resolve, reject) {
                  edit_tags(food_id, $add_tags, $remove_other_tags, resolve)
              });
          }
          all_promises.push(promise);
      }

      Promise.all(all_promises).then(() => {
          force_refresh = true;
          window.location.reload();
      });
    }

    window.onbeforeunload = function(){
        if (!force_refresh) {
            if (changed_foods.length) {
                return 'Are you sure you want to leave?';
            }
        }
    };

    function delete_row(param) {
        let to_delete = param.parentNode;
        to_delete.parentNode.removeChild(to_delete);
    }
</script>
{% endblock %}